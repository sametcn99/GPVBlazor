@rendermode InteractiveServer
@using GPVBlazor.Models

@if (ShowModal && Users is not null)
{
    <div class="modal is-active">
        <div class="modal-background" @onclick="CloseModal"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">
                    <span class="icon">
                        @if (ModalTitle == ModalTitleEnum.Followers)
                        {
                            <i class="fas fa-user-friends"></i>
                        }
                        else
                        {
                            <i class="fas fa-users"></i>
                        }
                    </span>
                    <span>@ModalTitle</span>
                    <span class="tag ml-2">@Users.Count</span>
                </p>
                <button class="delete is-large" aria-label="close" @onclick="CloseModal"></button>
            </header>
            <section class="modal-card-body">
                @if (Users.Any())
                {
                    <Virtualize Items="Users" Context="user">
                        <UserListItem user="user" />
                    </Virtualize>
                }
                else
                {
                    <div class="notification is-info">
                        <span class="icon">
                            <i class="fas fa-info-circle"></i>
                        </span>
                        No @ModalTitle.ToString().ToLower() found
                    </div>
                }
            </section>
        </div>
    </div>

}

@code {
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public List<User>? Users { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    public enum ModalTitleEnum { Followers, Following }

    [Parameter] public ModalTitleEnum ModalTitle { get; set; }

    private string UserListUrl(User user) => $"/p/{user.Login}";

    private async Task CloseModal()
    {
        ShowModal = false;
        await OnClose.InvokeAsync();
    }
}
