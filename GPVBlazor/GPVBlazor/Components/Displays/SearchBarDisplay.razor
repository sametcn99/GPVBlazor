@rendermode InteractiveServer
@using GPVBlazor.Models
@inject Services.Interfaces.IUserService UserService

<div class="field has-addons mb-3">
    <div class="control is-expanded">
        <input class="input" type="text" placeholder="Write user name..." @bind="inputValue" @bind:event="oninput" @onkeydown="HandleKeyPress">
    </div>
    <div class="control">
        <button class="button is-info" type="button" @onclick="SearchHandle">Search User</button>
    </div>
</div>

<div class="search-results" style="@(showResults ? "display: block;" : "display: none;")">
    <div>
        @if (data?.Items != null)
        {
            <Virtualize Items="@data.Items" Context="item">
                <a class="box" href="/p/@item.Login" style="display: flex; align-items: center; gap: 10px; text-decoration: none;">
                    <figure class="image is-48x48">
                        <img src="@item.AvatarUrl" alt="@item.Login" class="is-rounded" />
                    </figure>
                    <div>
                        <p class="title is-4">@item.Login</p>
                        <p class="subtitle is-6">@item.Type</p>
                    </div>
                </a>
            </Virtualize>
        }
    </div>
</div>


@code {
    private string inputValue = string.Empty;
    private UserSearchResult? data;
    private bool showResults = false;
    private CancellationTokenSource debounceCts = new CancellationTokenSource();

    private async Task FetchData()
    {
        if (string.IsNullOrWhiteSpace(inputValue))
        {
            data?.Items.Clear();
            return;
        }
        if (inputValue is not null)
        {
            data = await UserService.SearchUsers(inputValue);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        // Cancel any existing debounce operation
        debounceCts.Cancel();
        debounceCts = new CancellationTokenSource();

        try
        {
            // Wait for the debounce delay to elapse
            await Task.Delay(500, debounceCts.Token);
            await SearchHandle();
        }
        catch (TaskCanceledException)
        {
            // If a new key press event comes in, the current delay will be cancelled
        }
    }

    private async Task SearchHandle()
    {
        showResults = true;
        await FetchData();
    }
}
