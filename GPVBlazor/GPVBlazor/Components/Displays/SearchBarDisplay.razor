@rendermode InteractiveServer
@using GPVBlazor.Models
@inject Services.Interfaces.IUserService UserService

<button class="button is-primary is-large is-rounded" @onclick="OpenModal">
    <span class="icon">
        <i class="fas fa-search"></i>
    </span>
    <span>Search GitHub Users</span>
</button>

<div class="modal @(isModalActive ? "is-active" : "")">
    <div class="modal-background" @onclick="CloseModal"></div>
    <div class="modal-card">
        <header class="modal-card-head">
            <p class="modal-card-title">
                <span class="icon">
                    <i class="fas fa-search"></i>
                </span>
                <span>Search GitHub User</span>
            </p>
            <button class="delete" aria-label="close" @onclick="CloseModal"></button>
        </header>
        <section class="modal-card-body">
            <div class="field has-addons mb-4">
                <div class="control is-expanded">
                    <input class="input is-medium" 
                           type="text" 
                           placeholder="Type a username..." 
                           @bind="inputValue" 
                           @bind:event="oninput" 
                           @onkeydown="HandleKeyPress">
                </div>
                <div class="control">
                    <button class="button is-primary is-medium" type="button" @onclick="SearchHandle">
                        <span class="icon">
                            <i class="fas fa-search"></i>
                        </span>
                        <span>Search</span>
                    </button>
                </div>
            </div>

            <div class="search-results" style="@(showResults ? "display: block;" : "display: none;")">
                @if (data?.Items != null && data.Items.Any())
                {
                    <div class="mb-3">
                        <p class="has-text-weight-semibold">
                            <span class="tag is-primary is-light">@data.Items.Count</span> 
                            users found
                        </p>
                    </div>
                    <div>
                        <Virtualize Items="@data.Items" Context="item">
                            <a class="box mb-3" href="/p/@item.Login" style="display: flex; align-items: center; gap: 15px; text-decoration: none;">
                                <figure class="image is-64x64">
                                    <img src="@item.AvatarUrl" alt="@item.Login" class="is-rounded" />
                                </figure>
                                <div class="is-flex-grow-1">
                                    <p class="title is-5 mb-1">@item.Login</p>
                                    <p class="subtitle is-6 has-text-grey">
                                        <span class="icon is-small">
                                            <i class="fas fa-tag"></i>
                                        </span>
                                        @item.Type
                                    </p>
                                </div>
                                <span class="icon">
                                    <i class="fas fa-chevron-right"></i>
                                </span>
                            </a>
                        </Virtualize>
                    </div>
                }
                else if (showResults && string.IsNullOrEmpty(inputValue))
                {
                    <div class="notification is-warning is-light">
                        <span class="icon">
                            <i class="fas fa-exclamation-triangle"></i>
                        </span>
                        Please enter a username to search
                    </div>
                }
                else if (showResults)
                {
                    <div class="notification is-info is-light">
                        <span class="icon">
                            <i class="fas fa-info-circle"></i>
                        </span>
                        No users found. Try a different search term.
                    </div>
                }
            </div>
        </section>
        <footer class="modal-card-foot">
            <button class="button" @onclick="CloseModal">Close</button>
        </footer>
    </div>
</div>

@code {
    private string inputValue = string.Empty;
    private UserSearchResult? data;
    private bool showResults = false;
    private bool isModalActive = false;
    private CancellationTokenSource debounceCts = new CancellationTokenSource();

    private async Task FetchData()
    {
        if (string.IsNullOrWhiteSpace(inputValue)) { data?.Items.Clear(); return; }
        if (inputValue is not null) data = await UserService.SearchUsers(inputValue);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        // Cancel any existing debounce operation
        debounceCts.Cancel();
        debounceCts = new CancellationTokenSource();

        try
        {
            // Wait for the debounce delay to elapse
            await Task.Delay(500, debounceCts.Token);
            await SearchHandle();
        }
        catch (TaskCanceledException)
        {
            // If a new key press event comes in, the current delay will be cancelled
        }
    }

    private async Task SearchHandle() { showResults = true; await FetchData(); }

    private void OpenModal() { isModalActive = true; }

    private void CloseModal() { isModalActive = false; showResults = false; inputValue = string.Empty; }
}
