@rendermode InteractiveServer
@using GPVBlazor.Models
@inject Services.Interfaces.IContactService ContactService

@if (UserProfile is null) { return; }

<div class="card mb-3">
    <div class="card-body">
        <img src="@UserProfile.AvatarUrl" alt="Avatar" class="img-thumbnail rounded-circle mb-3 user-select-none pe-none" style="width: 200px; height: 200px;" />
        <h2 class="mb-1 text-decoration-none fw-bold" href="@UserProfile.HtmlUrl">@UserProfile.Name</h2>
        <p class="mb-1">@UserProfile.Bio</p>
        <p class="mb-1">@UserProfile.Email</p>
        <p class="mb-1">@UserProfile.Location</p>
        <p class="mb-1"><strong>Public Repos:</strong> @UserProfile.PublicRepos</p>
        <p class="mb-1"><strong>Public Gists:</strong> @UserProfile.PublicGists</p>
        <p class="mb-1"><strong>Organizations:</strong> @UserProfile.Company</p>
        <p class="mb-1"><strong>Last Update:</strong> @UserProfile.UpdatedAt</p>
        <p class="mb-1"><strong>Member Since:</strong> @UserProfile.CreatedAt</p>
    </div>
    <div class="card-footer d-flex gap-2 flex-wrap">
        <button class="btn btn-primary" @onclick="FetchAndShowFollowersModal">Followers: @UserProfile.Followers</button>
        <button class="btn btn-primary" @onclick="FetchAndShowFollowingModal">Followings: @UserProfile.Following</button>
        <a class="mb-1 text-decoration-none" href="@(UserProfile?.Blog?.StartsWith("http") == true ? UserProfile.Blog : $"https://{UserProfile?.Blog}")"><strong>Website:</strong> @UserProfile?.Blog</a>
        <p class="mb-1"><strong>Company:</strong> @UserProfile?.Company</p>
    </div>
</div>

@if (showFollowersModal is true)
{
    <ContactListModal ShowModal="showFollowersModal" Users="followers" ModalTitle="ContactListModal.ModalTitleEnum.Followers" />
}
else if (showFollowingModal is true)
{
    <ContactListModal ShowModal="showFollowingModal" Users="followings" ModalTitle="ContactListModal.ModalTitleEnum.Following" />
}

@code {
    [Parameter] public User? UserProfile { get; set; }
    [Parameter] public string? token { get; set; }

    private List<User>? followers;
    private bool showFollowersModal = false;

    private List<User>? followings;
    private bool showFollowingModal = false;


    private async Task FetchAndShowFollowersModal()
    {
        if (UserProfile?.Login is null) return;
        if (token is null) return;
        followers = await ContactService.FetchModalData<User>(UserProfile.Login, "followers", token);
        ToggleModalVisibility(showFollowers: true);
    }

    private async Task FetchAndShowFollowingModal()
    {
        if (UserProfile?.Login is null) return;
        if (token is null) return;
        followings = await ContactService.FetchModalData<User>(UserProfile.Login, "following", token);
        ToggleModalVisibility(showFollowing: true);
    }

    private void ToggleModalVisibility(bool showFollowers = false, bool showFollowing = false)
    {
        showFollowersModal = showFollowers;
        showFollowingModal = showFollowing;
    }
}