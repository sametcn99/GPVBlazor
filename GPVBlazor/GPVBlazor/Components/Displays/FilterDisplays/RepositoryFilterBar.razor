@using GPVBlazor.Models
@using GPVBlazor.Services.Interfaces
@inject IRepositoryFilterService filterService

<section class="field is-grouped is-grouped-multiline">
    <div class="control is-expanded">
        <input type="text" value="@searchQuery" @oninput="OnSearchQueryChanged" class="input" placeholder="Search...">
    </div>
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @onchange="HandleArchivedChange" checked="@includeArchived">
            Include Archived
        </label>
    </div>
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @onchange="HandleForkedChange" checked="@includeForked">
            Include Forked
        </label>
    </div>
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @onchange="HandleTemplatesChange" checked="@includeTemplates">
            Include Templates
        </label>
    </div>
    <div class="control">
        <div class="select is-fullwidth">
            <select @onchange="HandleSortChange">
                <option value="">Sort By</option>
                <option value="Updated Descending">Updated Descending</option>
                <option value="Updated Ascending">Updated Ascending</option>
                <option value="Created Descending">Created Descending</option>
                <option value="Created Ascending">Created Ascending</option>
                <option value="Stars Descending">Stars Descending</option>
                <option value="Stars Ascending">Stars Ascending</option>
            </select>
        </div>
    </div>
    <div class="control">
        <div class="select is-fullwidth">
            <select @onchange="HandleTopicChange">
                <option value="">Topics</option>
                @foreach (var topic in Topics)
                {
                    <option value="@topic">@topic</option>
                }
            </select>
        </div>
    </div>
    <div class="control">
        <div class="select is-fullwidth">
            <select @onchange="HandleLanguageChange">
                <option value="">Languages</option>
                @foreach (var language in Languages)
                {
                    <option value="@language">@language</option>
                }
            </select>
        </div>
    </div>
    <div class="control">
        <div class="select is-fullwidth">
            <select @onchange="HandleLicenseChange">
                <option value="">Licenses</option>
                @foreach (var license in Licenses)
                {
                    <option value="@license">@license</option>
                }
            </select>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public List<Repository>? Repositories { get; set; }

    public List<Repository>? _Repositories { get; set; }

    [Parameter]
    public EventCallback<List<Repository>> OnFilteredRepositoriesChanged { get; set; }

    private List<Repository>? FilteredRepositories { get; set; }

    private List<string> Topics { get; set; } = new();
    private List<string> Languages { get; set; } = new();
    private List<string> Licenses { get; set; } = new();

    private string searchQuery = string.Empty;
    private string selectedVisibility = string.Empty;
    private string selectedSort = string.Empty;
    private string selectedTopic = string.Empty;
    private string selectedLanguage = string.Empty;
    private string selectedLicense = string.Empty;
    private bool includeArchived = true;
    private bool includeForked = true;
    private bool includeTemplates = true;

    protected override void OnInitialized()
    {
        if (Repositories == null) return;
        Topics = Repositories.SelectMany(r => r.Topics ?? new List<string>()).Distinct().ToList();
        Languages = Repositories.Select(r => r.Language ?? string.Empty).Distinct().ToList();
        Licenses = Repositories.Where(r => r.License != null).Select(r => r.License!.Name ?? string.Empty).Distinct().ToList();
        _Repositories = Repositories;
    }

    private void OnSearchQueryChanged(ChangeEventArgs e) { searchQuery = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleVisibilityChange(ChangeEventArgs e) { selectedVisibility = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleSortChange(ChangeEventArgs e) { selectedSort = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleTopicChange(ChangeEventArgs e) { selectedTopic = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleLanguageChange(ChangeEventArgs e) { selectedLanguage = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleLicenseChange(ChangeEventArgs e) { selectedLicense = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleArchivedChange(ChangeEventArgs e) { includeArchived = e.Value != null ? (bool)e.Value : true; ApplyFilters(); }
    private void HandleForkedChange(ChangeEventArgs e) { includeForked = e.Value != null ? (bool)e.Value : true; ApplyFilters(); }
    private void HandleTemplatesChange(ChangeEventArgs e) { includeTemplates = e.Value != null ? (bool)e.Value : true; ApplyFilters(); }

    private void ApplyFilters()
    {
        FilteredRepositories = filterService.FilterRepositories(Repositories!, _Repositories!, searchQuery,includeArchived,includeForked,includeTemplates,selectedSort,selectedTopic,selectedLanguage,selectedLicense);
        OnFilteredRepositoriesChanged.InvokeAsync(FilteredRepositories);
        StateHasChanged();
    }
}
