@using GPVBlazor.Models
@using GPVBlazor.Services.Interfaces
@inject IRepositoryFilterService filterService

<section class="box mb-4" style="background-color: var(--card-bg); border: 1px solid var(--border-color);">
    <h3 class="title is-5 mb-4">
        <span class="icon has-text-primary">
            <i class="fas fa-filter"></i>
        </span>
        <span>Filter Repositories</span>
    </h3>
    
    <div class="field">
        <label class="label">Search</label>
        <div class="control has-icons-left">
            <input type="text" 
                   value="@searchQuery" 
                   @oninput="OnSearchQueryChanged" 
                   class="input" 
                   placeholder="Search repositories...">
            <span class="icon is-left">
                <i class="fas fa-search"></i>
            </span>
        </div>
    </div>

    <div class="columns is-multiline">
        <div class="column is-4">
            <div class="field">
                <label class="label">Sort By</label>
                <div class="control has-icons-left">
                    <div class="select is-fullwidth">
                        <select @onchange="HandleSortChange">
                            <option value="">Default</option>
                            <option value="Updated Descending">🔄 Recently Updated</option>
                            <option value="Updated Ascending">🔄 Least Updated</option>
                            <option value="Created Descending">🆕 Newest First</option>
                            <option value="Created Ascending">🕐 Oldest First</option>
                            <option value="Stars Descending">⭐ Most Stars</option>
                            <option value="Stars Ascending">⭐ Least Stars</option>
                        </select>
                    </div>
                    <span class="icon is-left">
                        <i class="fas fa-sort"></i>
                    </span>
                </div>
            </div>
        </div>

        <div class="column is-4">
            <div class="field">
                <label class="label">Language</label>
                <div class="control has-icons-left">
                    <div class="select is-fullwidth">
                        <select @onchange="HandleLanguageChange">
                            <option value="">All Languages</option>
                            @foreach (var language in Languages)
                            {
                                <option value="@language">@language</option>
                            }
                        </select>
                    </div>
                    <span class="icon is-left">
                        <i class="fas fa-code"></i>
                    </span>
                </div>
            </div>
        </div>

        <div class="column is-4">
            <div class="field">
                <label class="label">Topic</label>
                <div class="control has-icons-left">
                    <div class="select is-fullwidth">
                        <select @onchange="HandleTopicChange">
                            <option value="">All Topics</option>
                            @foreach (var topic in Topics)
                            {
                                <option value="@topic">@topic</option>
                            }
                        </select>
                    </div>
                    <span class="icon is-left">
                        <i class="fas fa-tag"></i>
                    </span>
                </div>
            </div>
        </div>

        <div class="column is-4">
            <div class="field">
                <label class="label">License</label>
                <div class="control has-icons-left">
                    <div class="select is-fullwidth">
                        <select @onchange="HandleLicenseChange">
                            <option value="">All Licenses</option>
                            @foreach (var license in Licenses)
                            {
                                <option value="@license">@license</option>
                            }
                        </select>
                    </div>
                    <span class="icon is-left">
                        <i class="fas fa-certificate"></i>
                    </span>
                </div>
            </div>
        </div>

        <div class="column is-8">
            <label class="label">Filter Options</label>
            <div class="field is-grouped is-grouped-multiline">
                <div class="control">
                    <label class="checkbox">
                        <input type="checkbox" @onchange="HandleArchivedChange" checked="@includeArchived">
                        <span class="icon is-small">
                            <i class="fas fa-archive"></i>
                        </span>
                        Include Archived
                    </label>
                </div>
                <div class="control">
                    <label class="checkbox">
                        <input type="checkbox" @onchange="HandleForkedChange" checked="@includeForked">
                        <span class="icon is-small">
                            <i class="fas fa-code-branch"></i>
                        </span>
                        Include Forked
                    </label>
                </div>
                <div class="control">
                    <label class="checkbox">
                        <input type="checkbox" @onchange="HandleTemplatesChange" checked="@includeTemplates">
                        <span class="icon is-small">
                            <i class="fas fa-copy"></i>
                        </span>
                        Include Templates
                    </label>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public List<Repository>? Repositories { get; set; }

    public List<Repository>? _Repositories { get; set; }

    [Parameter]
    public EventCallback<List<Repository>> OnFilteredRepositoriesChanged { get; set; }

    private List<Repository>? FilteredRepositories { get; set; }

    private List<string> Topics { get; set; } = new();
    private List<string> Languages { get; set; } = new();
    private List<string> Licenses { get; set; } = new();

    private string searchQuery = string.Empty;
    private string selectedVisibility = string.Empty;
    private string selectedSort = string.Empty;
    private string selectedTopic = string.Empty;
    private string selectedLanguage = string.Empty;
    private string selectedLicense = string.Empty;
    private bool includeArchived = true;
    private bool includeForked = true;
    private bool includeTemplates = true;

    protected override void OnInitialized()
    {
        if (Repositories == null) return;
        Topics = Repositories.SelectMany(r => r.Topics ?? new List<string>()).Distinct().ToList();
        Languages = Repositories.Select(r => r.Language ?? string.Empty).Distinct().ToList();
        Licenses = Repositories.Where(r => r.License != null).Select(r => r.License!.Name ?? string.Empty).Distinct().ToList();
        _Repositories = Repositories;
    }

    private void OnSearchQueryChanged(ChangeEventArgs e) { searchQuery = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleVisibilityChange(ChangeEventArgs e) { selectedVisibility = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleSortChange(ChangeEventArgs e) { selectedSort = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleTopicChange(ChangeEventArgs e) { selectedTopic = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleLanguageChange(ChangeEventArgs e) { selectedLanguage = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleLicenseChange(ChangeEventArgs e) { selectedLicense = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void HandleArchivedChange(ChangeEventArgs e) { includeArchived = e.Value != null ? (bool)e.Value : true; ApplyFilters(); }
    private void HandleForkedChange(ChangeEventArgs e) { includeForked = e.Value != null ? (bool)e.Value : true; ApplyFilters(); }
    private void HandleTemplatesChange(ChangeEventArgs e) { includeTemplates = e.Value != null ? (bool)e.Value : true; ApplyFilters(); }

    private void ApplyFilters()
    {
        FilteredRepositories = filterService.FilterRepositories(Repositories!, _Repositories!, searchQuery,includeArchived,includeForked,includeTemplates,selectedSort,selectedTopic,selectedLanguage,selectedLicense);
        OnFilteredRepositoriesChanged.InvokeAsync(FilteredRepositories);
        StateHasChanged();
    }
}
