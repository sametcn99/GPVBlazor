@page "/p/{Username}"
@rendermode InteractiveServer
@inject Services.Interfaces.IUserService UserService
@inject Services.Interfaces.IContactService ContactService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using GPVBlazor.Models
@using GPVBlazor.Components.Displays

<PageTitle>@Username's Profile</PageTitle>

@if (user is not null)
{
    <UserProfileDisplay UserProfile="@user" token="@token" />
}
else
{
  <LoadingDisplay />
}

@if (stats is not null && repositories is not null)
{
    <UserStatisticsDisplay UserStats="@stats" Repositories="@repositories" User="@user" />
}
else
{
    <LoadingDisplay />
}

@if (repositories is not null)
{
    <div class="box">
        <h3>Repositories</h3>
        <GPVBlazor.Components.Displays.FilterDisplays.RepositoryFilterBar Repositories="repositories" OnFilteredRepositoriesChanged="UpdateFilteredRepositories" />
        <div class="columns is-multiline">
            <Virtualize Items="repositories" Context="repo" OverscanCount="100">
                <div class="column is-4">
                    <RepositoryDisplay repository="repo" @key="repo.NodeId" />
                </div>
            </Virtualize>
        </div>
    </div>

}

@code {
    [Parameter]
    public string? Username { get; set; }
    private User? user;
    private List<Repository>? repositories;
    private RepositoryStats? stats;
    string? token;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (token is null)
                {
                    await JS.InvokeVoidAsync("alert", "You need to add a auth token in home page.");
                    NavigationManager.NavigateTo("/");
                }

                if (Username is not null && token is not null)
                {
                    user = await UserService.FetchUserProfile(Username, token);
                    if (user is not null) StateHasChanged();

                    if (user is not null && repositories is null)
                    {
                        repositories = await UserService.FetchUserRepositories(Username, token, user.PublicRepos) ?? new List<Repository>();
                        if (repositories.Any())
                        {
                            stats = new RepositoryStats(repositories);
                            StateHasChanged();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("An error occurred", ex);
            }
        }
    }

      private void UpdateFilteredRepositories(List<Repository> filteredRepositories)
    {
        // Update the repositories list with the filtered repositories
        repositories = filteredRepositories;

        // Refresh the UI
        StateHasChanged();
    }
}