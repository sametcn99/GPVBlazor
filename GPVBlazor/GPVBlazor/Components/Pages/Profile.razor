@page "/p/{Username}"
@rendermode InteractiveServer
@using GPVBlazor.Models
@using GPVBlazor.Components.Displays
@using GPVBlazor.Services.Interfaces
@inject IUserService UserService
@inject IContactService ContactService
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>@Username's Profile</PageTitle>

@if (user is not null)
{
    <UserProfileDisplay UserProfile="@user"  token="@token"/>
}
else
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@if (stats is not null && repositories is not null)
{
    <UserStatisticsDisplay UserStats="@stats" Repositories="@repositories" User="@user" />
}
else
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@if (repositories?.Any() == true)
{
    <div>
        <h3 class="mb-4">Repositories</h3>
        <div class="row">
            @foreach (var repo in repositories)
            {
                <RepositoryDisplay Repository="@repo" />
            }
        </div>
    </div>
}
else if (repositories is not null)
{
    <p>No repositories found.</p>
}

@code {
    [Parameter]
    public string? Username { get; set; }
    private User? user;
    private List<Repository>? repositories;
    private RepositoryStats? stats;
    string token;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (token is null)
                {
                    JS.InvokeVoidAsync("alert", "You need to add a auth token in home page.");
                    NavigationManager.NavigateTo("/");
                }

                user = await UserService.FetchUserProfile(Username, token);
                repositories = await UserService.FetchUserRepositories(Username, token) ?? new List<Repository>();

                if (repositories.Any())
                {
                    stats = new RepositoryStats(repositories);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("An error occurred", ex);
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Username)) return;


        user = await UserService.FetchUserProfile(Username, token);
        repositories = await UserService.FetchUserRepositories(Username, token) ?? new List<Repository>();

        if (repositories.Any())
        {
            stats = new RepositoryStats(repositories);
        }
    }
}
