@page "/p/{Username}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject Services.Interfaces.IUserService UserService
@inject Services.Interfaces.IContactService ContactService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using GPVBlazor.Models
@using GPVBlazor.Components.Displays

<PageTitle>@Username's Profile</PageTitle>

<div class="container mt-5">
    @if (user is not null)
    {
        <UserProfileDisplay UserProfile="@user" token="@token" />
    }
    else
    {
        <LoadingDisplay />
    }

    @if (stats is not null && repositories is not null)
    {
        <UserStatisticsDisplay UserStats="@stats" Repositories="@repositories" User="@user" Token="@token" />
    }
    else if (user is not null)
    {
        <LoadingDisplay />
    }

    @if (repositories is not null)
    {
        <div class="box fade-in-up">
            <h2 class="title is-3 mb-4">
                <span class="icon has-text-primary">
                    <i class="fas fa-folder"></i>
                </span>
                <span>Repositories</span>
                <span class="tag is-primary is-light is-medium ml-3">@repositories.Count</span>
            </h2>
            <GPVBlazor.Components.Displays.FilterDisplays.RepositoryFilterBar Repositories="repositories"
                OnFilteredRepositoriesChanged="UpdateFilteredRepositories" />
            <div class="columns is-multiline mt-4">
                <Virtualize Items="repositories" Context="repo" OverscanCount="150">
                    <div class="column is-4">
                        <RepositoryDisplay repository="repo" Token="@token" @key="repo.NodeId" />
                    </div>
                </Virtualize>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Username { get; set; }
    private User? user;
    private List<Repository>? repositories;
    private RepositoryStats? stats;
    string? token;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
                
                if (string.IsNullOrWhiteSpace(token))
                {
                    await JS.InvokeVoidAsync("alert", "You need to add a auth token in home page.");
                    NavigationManager.NavigateTo("/");
                    return;
                }

                if (!string.IsNullOrWhiteSpace(Username))
                {
                    await LoadUserData();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
                await JS.InvokeVoidAsync("alert", "An error occurred while loading the profile. Please try again.");
                NavigationManager.NavigateTo("/");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task LoadUserData()
    {
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(token))
            return;

        try
        {
            user = await UserService.FetchUserProfile(Username, token);
            StateHasChanged();

            if (user is not null)
            {
                repositories = await UserService.FetchUserRepositories(Username, token, user.PublicRepos) ?? new List<Repository>();
                
                if (repositories.Any())
                {
                    stats = new RepositoryStats(repositories);
                    StateHasChanged();
                    repositories = await UserService.FetchReadmes(Username, token, repositories);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            throw;
        }
    }

    private void UpdateFilteredRepositories(List<Repository> filteredRepositories)
    {
        repositories = filteredRepositories;
        StateHasChanged();
    }
}